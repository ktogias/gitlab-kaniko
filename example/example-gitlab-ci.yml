# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: localhost:32000/gitlab-kaniko/kanikov1.14:latest
  script:
    - echo "Building image..."
    - kaniko-build
      --context $CI_PROJECT_DIR/
      --dockerfile Dockerfile
      --destination my-cluster-domain.io:32000/example:$CI_COMMIT_SHORT_SHA
      --insecure
      --label commit="$CI_COMMIT_SHORT_SHA"
      --label latest="True"
    - echo "Building image complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: roffe/kubectl
  before_script:
  - mkdir -p $HOME/.kube
  - echo -n $KUBECONFIG | base64 -d > $HOME/.kube/config
  script:
    - echo "Deploying ..."
    - sed -i "s/{version}/$CI_COMMIT_SHORT_SHA/g" example-deployment.yaml
    - kubectl apply -f kuberentes/example.yaml
    - echo "Successfully deployed."

